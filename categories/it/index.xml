<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT on Jaehue&#39;s</title>
    <link>https://jaehue.github.io/categories/it/</link>
    <description>Recent content in IT on Jaehue&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 27 Jan 2023 14:46:54 +0900</lastBuildDate>
    
	<atom:link href="https://jaehue.github.io/categories/it/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>전략이 먹히지 않는 이유</title>
      <link>https://jaehue.github.io/post/2023.01.27/</link>
      <pubDate>Fri, 27 Jan 2023 14:46:54 +0900</pubDate>
      
      <guid>https://jaehue.github.io/post/2023.01.27/</guid>
      <description>전략을 세우는 기준은 현재다.
지금 시점에서 과거를 돌아보고 미래를 예상해본다. 그리고 예상되는 미래를 준비한다.
다양한 미래가 예상되면 플랜A, 플랜B를 준비한다. 예상되는 미래가 2개 이상일때는? 플랜C, 플랜D, 플랜E,,,를 준비해야겠지.
전략이 먹히지 않는 첫번째 이유는, 앞으로 펼쳐질 미래의 다양함은 우리의 플랜을 넘어선다. 미래는 예측할 수 없다. 그래서 대비할수도 없다. 반응할 뿐이다.
하지만 미래는 한번에 짠ㅡ 하고 나타나지 않는다. 지진이 일어나기 전에도 전조현상이 있듯, 미래도 전조현상이 있다. 동물들이 그 전조현상을 알아채고 바로 반응하듯, 우리도 동물처럼 전조현상을 예의주시하고 있어야 하고 거기에 기민하게 반응해야 한다.</description>
    </item>
    
    <item>
      <title>실패로부터 배운 한주</title>
      <link>https://jaehue.github.io/post/2023.01.21/</link>
      <pubDate>Sat, 21 Jan 2023 14:43:48 +0900</pubDate>
      
      <guid>https://jaehue.github.io/post/2023.01.21/</guid>
      <description>여러 일로 허덕이는 한주였다.
사실, 난 월요일날 이걸 인지했었다.
지난 주간회의때, 이번주 해야할 일이 잘 나오지 않았다.
아ㅡ 일주일의 일도 명확하게 정의할 수 없을만큼 불투명한 상태구나.
일단 수요일까지 할일만 정하고 수요일 오후에 다시 얘기해보자고 했었다.(그것도 사실 모호하긴 했었음)
일주일을 예측 못하는 주간이라니.. 이번주는 통제 안되는 일이 빵빵 터질꺼라고 예상을 했었어야 했다. 그리고 난 매일마다 통제 안되는 상황을 예의주시하고 있었어야 했다. 근데 나도 그냥 별 신경 안쓰고 내 할일만 열심히 하며 보냈다.</description>
    </item>
    
    <item>
      <title>ChatGPT와 함께 코딩하기</title>
      <link>https://jaehue.github.io/post/2023.01.10/</link>
      <pubDate>Tue, 10 Jan 2023 14:39:42 +0900</pubDate>
      
      <guid>https://jaehue.github.io/post/2023.01.10/</guid>
      <description>여기저기 ChatGPT 얘기로 떠들썩하다.
늘 그렇듯 새로운 기술이 나오면 그걸로 바뀔 미래를 점쳐보느라 바쁘다.
그런 건 잘 모르겠고, 나의 관심은.
&amp;ldquo;그래서 어떻게 하면 개발을 좀 더 쉽게 할 수 있을까?&amp;rdquo;
1인 개발자로, 하이데어를 혼자서 개발하고 있는데.
상당 부분의 일은 단순작업의 반복이다.
많은 부분을 자동화해 놓았지만, 그래도 단순코딩은 여전히 많다. 그런 걸 어떻게 줄일 수 있을까?
ChatGPT를 내 부사수처럼, 외주 개발자처럼, 함께 짝코딩하는 동료처럼, 부담 없이 아무거나 질문할 수 있는 전문가처럼 사용할 수 있지 않을까?</description>
    </item>
    
    <item>
      <title>또 한 번, 세상이 뒤바뀌는 시기</title>
      <link>https://jaehue.github.io/post/2023.01.09/</link>
      <pubDate>Mon, 09 Jan 2023 14:36:34 +0900</pubDate>
      
      <guid>https://jaehue.github.io/post/2023.01.09/</guid>
      <description>AI로 인한 변화에 대해 비교적 차분하게 얘기한 듯
(대부분 무슨 판타지 같은 얘기 아니면, 엄청난 공포감 조성. 이런 자극적인 얘기들이 많더라)
난 4차 산업혁명을, “늘 있어왔던 세상의 변화가 엄청 빠른 속도로 진행되는 것”으로 정의했었다.
그걸 혁명이라 부르는 이유는, 그 변화의 속도가 정신 못 차릴 정도로 빠르다는 것.
기술이 변함에 따라 일자리가 없어지는 건 늘 있어왔던 일이다. 이제는 우편배달부, 신문 배달, 이런 일은 없어졌고. 좀 더 앞 시대를 생각해보면 지게꾼, 인력거 끄는 사람, 장돌뱅이, 이런 직업도 사라졌다.</description>
    </item>
    
    <item>
      <title>힘의 분산</title>
      <link>https://jaehue.github.io/post/2022.03.15/</link>
      <pubDate>Sat, 05 Mar 2022 14:31:50 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2022.03.15/</guid>
      <description>남의 일이 아닌, 내 일 새로 합류한 3명의 동료 이야기다.
매일 아침 데일리 미팅을 하기로 했고. “어제 한 일, 오늘 할 일, 이슈” 딱 이 3가지만 공유하자고 했다. 이슈를 말하라고 했더니, 개발하면서 만났던 여러 어려움을 얘기한다. 그런건 이슈가 아니라고 했다. 이슈가 뭐냐면,
 어제 하루 일을 시작하기 전 계획이 있었을 텐데. 하루를 살아보니 계획대로 안되더라 =&amp;gt; 이건 당연한 거다.!
그래서 계획이 틀어진 상태로 오늘을 시작했는데, 계획과 실제의 공백이 너무 커져서 이번 주 목표에 차질이 생길 것 같다.</description>
    </item>
    
    <item>
      <title>변화하는 동료들</title>
      <link>https://jaehue.github.io/post/2022.02.28/</link>
      <pubDate>Mon, 28 Feb 2022 16:53:11 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2022.02.28/</guid>
      <description>오랜만에 사무실 이야기다.
반년 전, 팀에서 코드 리뷰를 하자고 했을 때 동료들은 불편한 기색을 내비쳤다. 하지만 그들은 나의 제안을 따르는 것 말고는 별다른 방법이 없었다.
내가 코드 리뷰를 시작하기 전 먼저 했던 일은 gitlab runner를 사용해 배포 파이프라인을 구성해 놓는 일이었다. merge request를 만들고, 코드 리뷰를 거치고, 최종적으로 merge가 되어야 배포가 되도록 했다. 그리고 난 개발의 결과를 스테이징 환경에 배포된 것으로만 확인한다고 했다. 개인 PC에서 돌아가는 건 인정하지 않았다 ㅋ</description>
    </item>
    
    <item>
      <title>진짜 문제를 풀어가는 과정</title>
      <link>https://jaehue.github.io/post/2021.12.08/</link>
      <pubDate>Wed, 08 Dec 2021 08:20:19 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2021.12.08/</guid>
      <description>오랜만에 사무실 이야기다.
중국 회사에서 일한 지 일 년 반 정도가 되었다. 한번 이직해서 지금은 두 번째 회사다.
이번 회사에서는 회의에 참여 할 때가 많은데, 주로 복잡한 문제를 풀어야 하는 설계 관련 회의다.
나는 아직 중국 친구들이 말하는 디테일한 내용까지 모두 다 알아듣지 못한다.
겨우겨우 이해해서 부족한 정보를 바탕으로 판단을 내려야 할 때가 많다.
자연스럽게 한 발 떨어진 관찰자 입장에서 판단을 내리게 되는데, 때론 이런 나의 입장이 도움이 될 때도 있는 것 같다.</description>
    </item>
    
    <item>
      <title>새로운 것을 학습하는 방법</title>
      <link>https://jaehue.github.io/post/2021.11.30/</link>
      <pubDate>Tue, 30 Nov 2021 16:59:37 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2021.11.30/</guid>
      <description>주니어 시절, 욕심 많은 아이처럼 이 기술 저 기술을 목적 없이 마구마구 집어삼키던 시절이 있었다. 아이들이 포켓몬 카드 수첩에 새로운 아이템 카드를 넣고, 그걸 쳐다보며 마냥 흐뭇해하는 그런 마음처럼, 새로운 기술을 내 머릿속에 집어넣고 한번 써봤다는 것으로 우쭐해 질 때가 있었다
그러다 비즈니스 목표에 집중하고 그것을 동료들과 함께 이뤄가는 재미를 알고부터, 해결하려는 문제에 집중하고, 의미 있는 것을, 사람들에게 도움이 되는 뭔가를 만들어내는 재미에 빠져 몇 년을 보냈다.
올해 처음 접해본 것들 그러다 올해는, 다시 여러 새로운 기술들을 접하게 되었다.</description>
    </item>
    
    <item>
      <title>시끌벅적한 사무실 만들기</title>
      <link>https://jaehue.github.io/post/2021.07.23/</link>
      <pubDate>Fri, 23 Jul 2021 22:27:22 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2021.07.23/</guid>
      <description>아주 작은 변화, 시작 &amp;lt;7월 1일&amp;gt; 새로운 회사로 이직한 지 2달이 지났다.
사무실 분위기는 꽤 시끌벅적한데. 개발자들은 입도 뻥끗 안 하고 심각한 얼굴로 모니터만 쳐다보고 있고, 고객과 소통하는 사람들의 전화 목소리만 우렁차다. 우렁찬 목소리에는 넘치는 자신감(?)과 회사 내에서의 위치(?)가 드러나는 것 같다. 개발자들은 식사할 때조차 입을 잘 열지 않는다.
나와 함께 일하는 몇몇 친구들에게 git으로 협업하는 방법을 설명해주고, 이번 주부터 gitlab의 Merge Request 기능을 써서 코드 리뷰를 하기로 했다. 이슈를 등록하고, 브런치를 만들고, 코드 작성 후 자신의 repo에 푸쉬하고, Merge Request를 만들고, 디스커션을 하고, 머지를 하는 과정을 보여주며 설명해주었다.</description>
    </item>
    
    <item>
      <title>자연스러움</title>
      <link>https://jaehue.github.io/post/2021.05.19/</link>
      <pubDate>Wed, 19 May 2021 13:00:00 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2021.05.19/</guid>
      <description>코드를 작성하는 것은 정말 재미있는 일이다.
아주 작은 기능을 담당하는 작은 조각 하나를 만든다.
그런 조각을 2~3개 더 만들어 그것들끼리 연결을 지어놓는다.
이렇게 해 놓으면 꽤 많은 기능을 처리해낸다.
작은 조각 하나하나는 아주 단순한 몇 가지 기능만 할 뿐인데, 그런 것들이 2~3개만 모여도 꽤 다양한 기능을 해낸다.
2~3개의 조각이 모인 그것을 또 여러 개 만들어본다.
그리고 그것들이 상호 작용하게 한다.
서로 연결을 지어주는 것만으로, 훨씬 더 많은 기능을 담당하게 되었다.</description>
    </item>
    
    <item>
      <title>일하지 않는 사람은 가라</title>
      <link>https://jaehue.github.io/post/2020.04.04.devculture/</link>
      <pubDate>Sat, 04 Apr 2020 13:46:52 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2020.04.04.devculture/</guid>
      <description>2020-04-29 팝잇(popit)에 기고한 글 ⤴️
 이 글은 적당히 갖춰나간 운영 환경의 후속 글이다. 이전 글에서는 서비스의 외형적인 모습을 소개했다면, 이번 글에서는 그것을 가능하게 했던 내부의 문화를 소개한다.
MSAMicro Service Architecture
이 삽질을 3년이나 하고 나서야 뼛속까지 알게 되었다. 이건 기술의 문제가 아니었다. 문화였고 일하는 방식이었다. 익스트림 프로그래밍Extreme Programming, 이하 XP이 소개된 지는 이미 20년이 넘었지만, 계속해서 XP를 얘기하는 이유는 MSAMicro Service Architecture는 일하는 방식과 떼어서 얘기할 수 없기 때문이다.</description>
    </item>
    
    <item>
      <title>적당히 갖춰나간 운영 환경</title>
      <link>https://jaehue.github.io/post/2020.04.08.techset/</link>
      <pubDate>Sat, 04 Apr 2020 13:46:40 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/2020.04.08.techset/</guid>
      <description>2020-04-15 팝잇(popit)에 기고한 글 ⤴️
 2016년, 중국 패션 리테일 영역의 클라우드 서비스 회사가 되겠다는 야심 찬 희망을 품고 아기 발걸음1을 시작했고, 2020년 현재 아래와 같은 구성을 갖추었다. 처음부터 이런 구성을 그려놓고 차근차근 갖춰 나간 것은 아니었다. 2016년 봄, 알리(Ali) 클라우드에 3대의 리눅스 서버를 구매해서 1대에 대충 스테이징 환경과 각종 관리 툴을 세팅하고 2대 서버에 운영을 위한 최소한의 구성만 갖춘 채 첫 번째 기능을 출시했다. 매번 필요할 때마다 점진적으로 아키텍처를 개선해 나갔고, 4년이 지난 지금 꽤 그럴싸한(?</description>
    </item>
    
    <item>
      <title>Go언어에서 Context 사용하기</title>
      <link>https://jaehue.github.io/post/how-to-use-golang-context/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0900</pubDate>
      
      <guid>https://jaehue.github.io/post/how-to-use-golang-context/</guid>
      <description>Go에는 다른 대중적인 언어와 다른 개념들이 좀 있다.
 클래스를 과감히 빼버렸고 (그래서 상속이 없다) Exception이란 것도 없다 (예외 상황 자체를 허용하지 않겠다는 의지인가? 멋있어 보일진 몰라도 솔직히 불편하다. ㅠㅠ 궁시렁 궁시렁&amp;hellip;) 고루틴과 채널을 이용한 병행처리 모델도 친숙한 개념은 아니다  여기에 한 가지 더 보태자면, Context란 녀석이다.
처음 얘기한 세 가지는 Go 언어를 사용해서 뭔가를 만들려면 반드시 알아야 할 개념이기 때문에 Go 언어를 처음 접하는 대부분의 사람들은 시간을 할애해서 이 부분에 대해 공부를 한다.</description>
    </item>
    
    <item>
      <title>내 멋대로 구현한 이벤트 드리븐</title>
      <link>https://jaehue.github.io/post/event-driven/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/event-driven/</guid>
      <description>중국 이커머스 최대 행사인 쐉쓰이(双十一)때 11월11일 0시가 되자마자 매출이 급상승함과 동시에 이벤트가 미친듯이 순식간에 몰려드는 것을 보고, 일 년 전 밤을 지새우며 O2O 시스템을 Event driven 방식으로 바꾸느라 고생했던 순간이 떠올랐다.
쐉쓰이의 분위기는 동료가 쓴 글인 개발자가 바라본 중국 쇼핑 축제 쐉쓰이(광군제)에 생생하게 나타나 있다. 실제 당일날 MongoDB 인덱스 문제, 디스크 부족으로 인한 kafka 서버 장애, 등 몇몇 문제가 발생하기도 했지만, 고객에게는 문제없이 서비스가 제공되었고1, 쐉쓰이(双十一)는 무사히 지나갔다.
이번 글에서는 쐉쓰이(双十一)를 버틸 수 있었던 요소 중 하나였던 Event driven 방식을 소개하려고 한다.</description>
    </item>
    
    <item>
      <title>Go My Way #3 - 트레이싱</title>
      <link>https://jaehue.github.io/post/go-my-way-3-tracing/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/go-my-way-3-tracing/</guid>
      <description>Go My Way는 Go 언어로 웹 어플리케이션을 작성할 때 선호하는 나만의 방식을 3편에 걸쳐서 소개하는 글이다. 이전 글은 읽지 않았다면 아래 링크를 참조하기 바란다.
 Go My Way #1 - 웹 프레임워크 Go My Way #2 - 데이터베이스, 로깅 Go My Way #3 - 트레이싱 번외 - gomobile  이번 글에서는 트레이싱에 대해 소개하겠다.
이 글을 작성하는 지금 현재 우리 회사는 클라우드 상에 50여 개의 마이크로 서비스가 서로 얽혀서 동작하고 있다.</description>
    </item>
    
    <item>
      <title>Go My Way #2 - 데이터베이스, 로깅</title>
      <link>https://jaehue.github.io/post/go-my-way-2-database-and-logging/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/go-my-way-2-database-and-logging/</guid>
      <description>Go My Way는 Go 언어로 웹 어플리케이션을 작성할 때 선호하는 나만의 방식을 3편에 걸쳐서 소개하는 글이다. 이전 글은 읽지 않았다면 아래 링크를 참조하기 바란다.
 Go My Way #1 - 웹 프레임워크 Go My Way #2 - 데이터베이스, 로깅 Go My Way #3 - Configuration, Tracing, etc. 번외 - gomobile  이번 글에서는 데이터베이스와 로깅에 대해 소개하겠다.
데이터베이스 다른 언어에서 주로 사용하던 ORM(루비의 active record, 닷넷의 entityframework, 자바의 JPA, 등)을 생각한다면 Go의 DB 관련 패키지들은 대부분 2% 20% 이상 부족하다.</description>
    </item>
    
    <item>
      <title>Go My Way #1 - 웹 프레임워크</title>
      <link>https://jaehue.github.io/post/go-my-way-1-webframework/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/go-my-way-1-webframework/</guid>
      <description>루비의 Ruby on Rails, 자바의 Spring, 파이썬의 Django, 노드의 Express. 대부분의 인기 있는 언어는 메인 프레임워크가 있다. 그래서 고민 없이 그 언어에 맞는 메인 프레임워크를 사용한다. 하지만 Go는 이런 게 없다. Go는 많은 기능을 하나의 프레임워크에 담아놓는 방식보다, 상황에 맞게 필요한 패키지를 조합한 마이크로 프레임워크를 만들어 사용하는 것을 권장한다. 익숙해지면 이것이 편하지만, Go를 처음 접하는 사람들에게 어떤 패키지를 사용해야 할지 선택하는 것은 여간 어려운 일이 아니다.
Go 언어를 접한 지 3년이 되었고, 지난 1년 동안은 아주 적극적으로 Go 언어를 사용했다.</description>
    </item>
    
    <item>
      <title>Microservice in PangPang</title>
      <link>https://jaehue.github.io/post/microservice_in_pangpang/</link>
      <pubDate>Wed, 21 Sep 2016 22:04:23 +0800</pubDate>
      
      <guid>https://jaehue.github.io/post/microservice_in_pangpang/</guid>
      <description>사내 세미나 전 생각 정리를 위한 글
 회고 올해 4월부터 micro-service를 지향하면서 일을 해 왔다. 사실 별로 커 보이지도 않는 기능들을 다양한 서비스로 나누고, 여러 팀에서 나누어 개발을 해 왔다. 기능적으로 본다면, 샵링크*(중국 5000여개 매장의 판매 업무를 총괄하는 시스템)*와는 비교도 되지 않을 정도로 작고, 그룹웨어보다도 훨씬 작은 싸이즈이다. 그 큰 시스템도 하나의 서비스로 잘 돌아가고 있는데 POS를 통해 위챗 쿠폰을 사용할 수 있게 하자는 단순한 요구를 위해 OO개의 팀에서 OO개의 서비스를 만들었다.</description>
    </item>
    
    <item>
      <title>Go언어로 안전한 서비스 만들기</title>
      <link>https://jaehue.github.io/post/resilent-go-service/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>https://jaehue.github.io/post/resilent-go-service/</guid>
      <description>http://blog.remotty.com에 게시한 글을 Go 언어에 대해 발행한 글을 수집하는 차원에서 이곳으로 옮겨왔다.
 서비스를 만들때 비정상적으로 서비스가 종료되지 않고 안전하게 실행되도록 하는 것은 아주 중요하다(Resilency). 이번 포스트에서는 Resilency를 유지하면서 서비스를 작성하는 여러가지 방법에 대해서 소개하겠다. 오늘 소개하는 글은 지난 7월에 덴버에서 열린 GopherCon 2015에서 Blake Caldwell라는 사람이 발표한 내용을 기반으로 몇가지 설명을 곁들여서 작성한 것이다. (https://sourcegraph.com/blog/live/gophercon2015/123664481750)
사실 어떤 사람들에게는 쉬운 내용일 수 있다. 당연한 얘기를 하는 것일수도 있고&amp;hellip; 하지만 기본을 탄탄히 하자는 의미에서, 그리고 지난 7월 덴버에서 열린 GopherCon 2015에서도 발표되었던 내용이니 한번 읽어보면 좋을 것 같다.</description>
    </item>
    
  </channel>
</rss>